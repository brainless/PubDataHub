name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  backend-test:
    name: Backend Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.24'
        
    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
          
    - name: Install dependencies
      working-directory: ./backend
      run: go mod download
      
    - name: Verify dependencies
      working-directory: ./backend
      run: go mod verify
      
    - name: Check formatting
      working-directory: ./backend
      run: |
        if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
          echo "The following files are not formatted:"
          gofmt -s -l .
          exit 1
        fi
        
    - name: Run go vet
      working-directory: ./backend
      run: go vet ./...
      
    - name: Run tests
      working-directory: ./backend
      run: go test -race -coverprofile=coverage.out -covermode=atomic ./...
      
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./backend/coverage.out
        flags: backend
        name: backend-coverage
        
    - name: Build
      working-directory: ./backend
      run: go build -v ./...

  frontend-test:
    name: Frontend Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
        
    - name: Install dependencies
      working-directory: ./frontend
      run: npm ci
      
    - name: Check TypeScript compilation
      working-directory: ./frontend
      run: npx tsc --noEmit
      
    - name: Run ESLint
      working-directory: ./frontend
      run: npm run lint
      
    - name: Build application
      working-directory: ./frontend
      run: npm run build
      
    - name: Check build size
      working-directory: ./frontend
      run: |
        echo "Build size analysis:"
        du -sh dist/
        ls -la dist/assets/
        
  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.24'
        
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
        
    - name: Install backend dependencies
      working-directory: ./backend
      run: go mod download
      
    - name: Install frontend dependencies
      working-directory: ./frontend
      run: npm ci
      
    - name: Start backend server
      working-directory: ./backend
      run: |
        go run cmd/server/main.go &
        sleep 5
        
    - name: Test API endpoints
      run: |
        echo "Testing API endpoints..."
        curl -f http://localhost:8080/api/home || exit 1
        echo "API endpoints working correctly"
        
    - name: Build frontend against running backend
      working-directory: ./frontend
      run: npm run build
      
    - name: Stop backend server
      run: pkill -f "go run cmd/server/main.go" || true