name: Security

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run security scans daily at 2 AM UTC
    - cron: '0 2 * * *'

jobs:
  go-security:
    name: Go Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.21'
        
    - name: Install govulncheck
      run: go install golang.org/x/vuln/cmd/govulncheck@latest
      
    - name: Run govulncheck
      run: |
        echo "Running Go vulnerability check..."
        govulncheck -json ./... > govulncheck-report.json || true
        echo "Vulnerability check completed"
        
    - name: Display govulncheck results
      run: |
        echo "Govulncheck Summary:"
        if [ -f govulncheck-report.json ]; then
          # Count vulnerabilities
          vuln_count=$(cat govulncheck-report.json | jq -r 'select(.finding != null) | .finding.trace[0].function' 2>/dev/null | wc -l || echo "0")
          echo "Vulnerabilities found: $vuln_count"
          
          if [ "$vuln_count" -gt 0 ]; then
            echo "⚠️  Vulnerabilities detected in Go dependencies"
            cat govulncheck-report.json | jq -r 'select(.finding != null)'
          else
            echo "✅ No vulnerabilities found in Go dependencies"
          fi
        else
          echo "✅ No vulnerabilities found"
        fi
        
    - name: Install gosec
      run: |
        echo "Installing gosec..."
        go install github.com/securecodewarrior/gosec/v2/cmd/gosec@latest
      continue-on-error: true
      
    - name: Run gosec security scan  
      run: |
        echo "Running gosec security scan..."
        if command -v gosec >/dev/null 2>&1; then
          gosec -fmt json -out gosec-report.json ./... || true
          echo "✅ Gosec scan completed"
        else
          echo "⚠️  gosec not available, creating empty report"
          echo '{"Issues":[]}' > gosec-report.json
        fi
        
    - name: Display gosec results
      run: |
        echo "Gosec Security Summary:"
        if [ -f gosec-report.json ]; then
          issues=$(cat gosec-report.json | jq -r '.Issues | length' 2>/dev/null || echo "0")
          echo "Security issues found: $issues"
          
          if [ "$issues" -gt 0 ]; then
            echo "⚠️  Security issues detected:"
            cat gosec-report.json | jq -r '.Issues[] | "- \(.severity): \(.details) in \(.file):\(.line)"' || echo "Could not parse issues"
          else
            echo "✅ No security issues found"
          fi
        else
          echo "✅ No security issues found"
        fi

  dependency-review:
    name: Dependency Review
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Dependency Review
      uses: actions/dependency-review-action@v4
      with:
        fail-on-severity: moderate
        
  codeql-analysis:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: go
        
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.21'
        
    - name: Build Go code (for CodeQL)
      run: go build ./cmd/...
      
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        category: "/language:go"